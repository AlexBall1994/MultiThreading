package cmsc433.p2;

import java.util.List;

import cmsc433.p2.SimulationEvent;


/**
 * Validates a simulation
 */
public class Validate {
	static int numCustomers;
	static int numCooks;
	static int numTables;
	static int machineCapacity;
	
	private static class InvalidSimulationException extends Exception {
		public InvalidSimulationException() { }
	};

	public Validate(int numCustomers,int numCooks,int numTables,int machineCapacity){
		this.numCustomers = numCustomers;
		this.numCooks = numCooks;
		this.numTables = numTables;
		this.machineCapacity = machineCapacity;
		
	}
	// Helper method for validating the simulation
	private static void check(boolean check,
			String message) throws InvalidSimulationException {
		if (!check) {
			System.err.println("SIMULATION INVALID : "+message);
			throw new Validate.InvalidSimulationException();
		}
	}

	/** 
	 * Validates the given list of events is a valid simulation.
	 * Returns true if the simulation is valid, false otherwise.
	 *
	 * @param events - a list of events generated by the simulation
	 *   in the order they were generated.
	 *
	 * @returns res - whether the simulation was valid or not
	 */
	public static boolean validateSimulation(List<SimulationEvent> events) {
		try {
			
			int numberOfCustomersGoing = 0;
			int numberOfCustomersEnter = 0;
			int numberOfCustomersLeft = 0;
			int machineStart = 0;
			int machineEnd = 0;
			int itemsFilled = 0;
			int itemsFinished = 0;
			//Cook tests
			int ordersReceived = 0;
			int ordersFinished = 0;
			int itemsPlaced = 0;
			int itemsFinishedBy = 0;
			int cooksEntered = 0;
			int cooksLeft = 0;
			
			for(int i = 0; i < events.size(); i++){
				if (events.get(i).event == SimulationEvent.EventType.CustomerStarting)
					numberOfCustomersGoing++;
				if (events.get(i).event == SimulationEvent.EventType.CustomerEnteredRatsies)
					numberOfCustomersEnter++;
				if (events.get(i).event == SimulationEvent.EventType.CustomerLeavingRatsies)
					numberOfCustomersLeft++;
				if (events.get(i).event == SimulationEvent.EventType.MachineStarting)
					machineStart++;
				if (events.get(i).event == SimulationEvent.EventType.MachineEnding)
					machineEnd++;
				if (events.get(i).event == SimulationEvent.EventType.MachineStartingFood)
					itemsFilled++;
				if (events.get(i).event == SimulationEvent.EventType.MachineDoneFood)
					itemsFinished++;
				if (events.get(i).event == SimulationEvent.EventType.CookReceivedOrder)
					ordersReceived++;
				if (events.get(i).event == SimulationEvent.EventType.CookStartedFood)
					itemsPlaced++;
				if (events.get(i).event == SimulationEvent.EventType.CookFinishedFood)
					itemsFinishedBy++;
				if (events.get(i).event == SimulationEvent.EventType.CookStarting)
					cooksEntered++;
				if (events.get(i).event == SimulationEvent.EventType.CookEnding)
					cooksLeft++;
				if (events.get(i).event == SimulationEvent.EventType.CookCompletedOrder);
					ordersFinished++;
					check((numberOfCustomersEnter - numberOfCustomersLeft) <= numTables, "Too many allowed to enter: " + (numberOfCustomersEnter - numberOfCustomersLeft));
				
					//checking that machines are never overloaded
				
				
					
			}
			
			check(events.get(0).event == SimulationEvent.EventType.SimulationStarting,
					"Simulation didn't start with initiation event");
			check(events.get(events.size()-1).event == 
					SimulationEvent.EventType.SimulationEnded,
					"Simulation didn't end with termination event");
			
			check(numberOfCustomersGoing == numCustomers, "Wrong number of customers went: " + numberOfCustomersGoing);
			
			check(machineStart == 4, "Not enough machine starts: " + machineStart);
			check(machineEnd == 4, "Not enough machine ends: " + machineEnd);
			check(numberOfCustomersEnter == numCustomers, "Not Everyone Entered: " + numberOfCustomersEnter);
			check(numberOfCustomersLeft == numCustomers, "Not Everyone Left: " + numberOfCustomersLeft);
			check(itemsFilled == (numCustomers*4), "not all items were filled: " + itemsFilled);
			check(itemsFinished == (numCustomers*4), "not all items were finished: " + itemsFinished);
			check ((itemsFilled - itemsFinished) == 0, "not all items made");
			
			//Cook basic tests
			check(ordersReceived == numCustomers, "Wrong number of orders: " +ordersReceived);
			check(itemsPlaced == (numCustomers*4), "Wrong number of items placed by cook: " + itemsPlaced);
			check(itemsFinishedBy == (numCustomers*4), "Wrong number of items finished by cook: " + itemsFinishedBy);
			check(cooksEntered == numCooks, "Not enough cooks entered: " + cooksEntered);
			check(cooksLeft == numCooks, "Not enough cooks left: " + cooksLeft);
			//check(ordersFinished == 10, "Not enough orders finished: " + ordersFinished);
			 
			 
			

			/* In P2 you will write validation code for things such as:
				Should not have more eaters than specified
				Should not have more cooks than specified
				The Ratsie's capacity should not be exceeded
				The capacity of each machine should not be exceeded
				Eater should not receive order until cook completes it
				Eater should not leave Ratsie's until order is received
				Eater should not place more than one order
				Cook should not work on order before it is placed
			 */

			return true;
		} catch (InvalidSimulationException e) {
			return false;
		}
	}
}
